Context:
2 players with a glicko ranking have a match, winner and loser need a ranking BEFORE they have their match

Input: dataframe - see dataframe_output.csv - each row contains a winner (player 1) and a loser (player 2)

Output: dataframe with 3 additional columns: glicko2 ranking for player 1, glicko2 ranking for player 2 and the percentage of winning according to their ranking

A glicko ranking has 3 components: a rating (r), the deviation (rd) and the volatility (sigma)

Unranked player (who hasn't had a match before): r=1500
						 rd=350
						 sigma= 0.06
Those 3 parameters need to be an input parameter (or a global variable) as it may change. Also, they are show in the glicko scale and not glicko2.

x The glicko2 rankings are updated based on the outcome of matches over a period of time. We follow the ATP update rate which updates every monday (period of 7 days starting on tuesday)
x The constant tau = 0.3 - need to test which value for tau is best. This variable constrains the change in volatility over time

For each player that competed we do:
	1. Convert r and rd to the glick2 scale: 
		mu = (r-1500)/173.7178
		phi = rd/173.7178
		sigma remains the same
	2. Assuming the player play n matches during the period:
		nu=1/sum(g(phij)^2*E(mu,muj,phij))*(1-E(mu,muj,phij)),j=1,n)
		where:
			g(phi)=1/sqrt(1+3*phi^2/pi^2)
			E(mu,muj,phij)=1/(1+exp(-g(phij)*(mu-muj)))
	3. Compute delta (est. improvement in rating):
		delta=nu*sum(g(phij)(sj-E(mu,muj,phij)),j=1,m)
		sj =1 for a win, 0 for a loss (for now)
	4. Determine the new volatility sigma':
		with a=ln(sigma^2), we define f(x)=(exp(delta^2-phi^2-nu-exp(x)))/(2*(phi^2+nu+exp(x))^2)-(x-a)/tau^2
		define epsilon = 0.000001
		Set the convergence interval: A=a
					      B=ln(delta^2-phi^2-nu) if delta^2>phi^2+nu else let k=1 and while f(a-k*tau)<0, k=k+1, then B=a-k*tau
		let fa=f(A) and fb=f(B)
		while abs(B-A)>epsilon do:
			let C=A+(A-B)*fa/(fb-fa) and let fc=f(C)
			if fc*fb<0 then set A=B and fa=fb else fa=fa/2
			set B=C and fb=fc
		sigma'=exp(A/2)
	5. Update the rating deviation: phi*=sqrt(phi^2+sigma'^2)
	6. Update to the new r and rd:
		phi'=1/sqrt(1/phi*^2+1/nu)
		mu'=mu+phi'^2*sum(g(phij)*(sj-E(mu,muj,phij)),j=1,n)
	7. Convert the rating and rd back to the glicko scale:
		r'=173.7178*mu'+1500
		rd'=173.7178*phi'

For all player that did not compete in this period:
	Do only steps 1 and 6 (r and sigma do not change, rd increases).


Example to check the algo is correct:

player 1 ranking: (1500, 200, 0.06)
player 2 ranking: (1400, 30, 0.06)
player 3 ranking: (1550, 100, 0.06)
player 4 ranking: (1700, 300, 0.06)

tau = 0.5

player 1 beats player 2 and loses to player 3 and 4.

Player 1 new rating will be: (1464.06, 151.52, 0.05999)




